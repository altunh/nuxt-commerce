generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts       Account[]
  sessions       Session[]
  cart           Cart?
  wishedProducts Product[] @relation("WishedProducts")
  reviews        Review[]
  orders         Order[]
}

model Product {
  id          String   @id @default(cuid())
  categoryId  String?
  name        String
  description String?
  image       String
  price       Float
  keywords    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  wishedBy   User[]      @relation("WishedProducts")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  title     String
  body      String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  total     Float
  name      String
  address   String
  zipCode   String
  phone     String
  city      String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  quantity  Int
  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
